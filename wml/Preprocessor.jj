options
{
	LOOKAHEAD=3;
	STATIC=false;
	// Enable these to print verbose javacc logs
	DEBUG_PARSER = false;
	DEBUG_LOOKAHEAD = false;
	DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(Preprocessor)
package wml;

import java.awt.Color;
import java.util.*;
import java.util.logging.*;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;

import static wml.ANSIFormatter.*;

public class Preprocessor {
	private final Logger pL = Logger.getLogger("preprocessor.parse");
	private boolean showParseLogs = false;
	private boolean warnParseLogs = false;
	
	private Color tdColor = new Color(255, 221, 0);
	private Color macroNameColor = new Color(0, 255, 128);
	private Color lineNumColor = new Color(0, 153, 255);
	private Color filePathColor = new Color(128, 192, 255);
	
	private PrintStream out;
	private HashMap<String, Definition> defines = new HashMap<>();
	
	public static void main(String[] args) {
		ArgParser argParse = new ArgParser();
		argParse.parseArgs(args);

		for (Handler handler : Logger.getLogger("").getHandlers()) {
			handler.setFormatter(new java.util.logging.Formatter() {
				@Override
				public String format(LogRecord r) {
					// Customize Message for separators between Level and Message
					Level l = r.getLevel();
					String lvlStr = "[" + l + "]";
					if (l == Level.WARNING) {
						lvlStr = colorify(lvlStr, Color.RED);
					} else if (l == Level.INFO) {
						lvlStr = colorify(lvlStr, Color.CYAN);
					}
					
					return lvlStr + " " + r.getMessage() + "\n";
				}
			});
		}
		
		try {
			Preprocessor p = new Preprocessor(System.in);
			if (argParse.inputPath != null) {
				p = new Preprocessor(Files.newInputStream(argParse.inputPath));
			}
			
			p.showParseLogs = argParse.showParseLogs;
			p.warnParseLogs = argParse.warnParseLogs;
			p.out = (argParse.out == null) ? System.out : argParse.out;
			p.token_source.dataPath = argParse.dataPath;
			p.token_source.userDataPath = argParse.userDataPath;
			p.token_source.showLogs = argParse.showLogs;

			if (argParse.inputPath != null) {
				p.debugPrint("Parsing file " + colorify(argParse.inputPath.toString(), p.filePathColor));
			}

			for (Path incpath : argParse.includes) {
				p.subparse(incpath);
			}
			
			p.parse();
		} catch(Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Create a preprocessor subprocess, that inherits properties
	 * from this one.
	 */
	private Preprocessor child(InputStream in) {
		Preprocessor pinc = new Preprocessor(in);
		pinc.showParseLogs = showParseLogs;
		pinc.warnParseLogs = warnParseLogs;
		pinc.out = (getOutput() == null) ? System.out : getOutput();
		pinc.token_source.dataPath = token_source.dataPath;
		pinc.token_source.userDataPath = token_source.userDataPath;
		pinc.token_source.showLogs = token_source.showLogs;
		return pinc;
	}

	private void subparse(Path p) throws IOException, ParseException {
		Path path = p;
		if (Files.isDirectory(path)) {
			Path p2 = path.resolve("./_main.cfg");
			if (!Files.exists(p2)) {
				File[] files = path.toFile().listFiles();
				try {
					if (files == null) return;
					for (File f : files) {
						subparse(f.toPath());
					}
					return;
				} catch (IOException e) {
					e.printStackTrace();
				}
			} else {
				path = p2;
			}
		}
	
		debugPrint("Including file " + colorify(path.toString(), filePathColor));
		Preprocessor p2 = child(Files.newInputStream(path));
		p2.parse();
		addDefines(p2.getDefines());
	}
	
	public PrintStream getOutput() {
		return out;
	}

	public void setOutput(PrintStream out) {
		this.out = out;
	}

	public HashMap<String, Definition> getDefines() {
		return this.defines;
	}

	public void addDefines(HashMap<String, Definition> newDefines) {
		this.defines.putAll(newDefines);
	}
	
	public void debugPrint(String s) {
		if (showParseLogs) {
			pL.info(s);
		}
	}
	
	public void warningPrint(String s) {
		if (showParseLogs || warnParseLogs) {
			pL.warning(s);
		}
	}

	public String position(Token tok) {
		return position(tok.beginLine, tok.beginColumn);
	}
	
	public String position(int line, int col) {
		return colorify("(" + line + ":" + col + ")", lineNumColor);
	}
}

PARSER_END(Preprocessor)

TOKEN_MGR_DECLS : {
	private final Logger tL = Logger.getLogger("preprocessor.token");

	public boolean showLogs = false;
	public Path dataPath;
	public Path userDataPath;
	
	public void debugPrint(String s) {
		if (showLogs) {
			tL.info(s);
		}
	}
}

SKIP : { < ("# "|"#!"|"##"|"#\n"|"#\r") (~["\n","\r"])* ("\n"|"\r"|"\r\n") > }

TOKEN : {
	< DEFINE : "#define" >	{ debugPrint("DEFINE"); }
|	< ENDDEF : "#enddef" >	{ debugPrint("ENDDEF"); }
|	< IFDEF  : "#ifdef" >	{ debugPrint("IFDEF"); }
|	< ENDIF  : "#endif" >	{ debugPrint("ENDIF"); }
|	< UNDEF  : "#undef" >	{ debugPrint("UNDEF"); }
|	< TEXTDOMAIN : "#textdomain" > { debugPrint("TEXTDOMAIN"); }
//|	< COMMENT: "#" (~["\n","\r"])* ("\n"|"\r"|"\r\n") > { debugPrint("Comment"); }
|	< LBR    : "{" >		{ debugPrint("Left Brace"); }
|	< RBR    : "}" >		{ debugPrint("Right Brace"); }
|	< LSB    : "[" >		{ debugPrint("Left Sq Bkt"); }
|	< RSB    : "]" >		{ debugPrint("Right Sq Bkt"); }
|	< EQL    : "=" >		{ debugPrint("Equals"); }
|	< SLASH  : "/" >		{ debugPrint("Slash"); }
|	< SPACE  : " "|"\t" >	{ debugPrint("Space"); }
|	< STAG   : <LSB> (<STRING>)+ <RSB> > { debugPrint("Start tag"); }
|	< ETAG   : <LSB> <SLASH> (<STRING>)+ <RSB> > { debugPrint("End tag"); }
|	< PATH   : (<STRING>) (<SLASH>) (<STRING>|<SLASH>)+ >	{ debugPrint("Path"); }
|	< STRING : (<LETTER>|<DIGIT>)+ >						{ debugPrint("STRING"); }
|	< NUMBER : (<DIGIT>)+ ("." (<DIGIT>)+)? >				{ debugPrint("NUMBER"); }
|	< LETTER :
		["A"-"Z"]|["a"-"z"]|<EQL>|"?"|"!"|":"|";"|"."|","
		|"_"|"-"|"\""|"'"|"+"|">"|"<"|"("|")"|"~"|"*"
	>
	{ debugPrint("LETTER"); }
|	< DIGIT  : ["0"-"9"] >					{ debugPrint("DIGIT"); }
|	< EOL    : "\n"|"\r"|"\r\n" >			{ debugPrint("EOL"); }
}

void parse() :
{
	Token tok; String content, exp;
}
{
	(
		  define() 
		| content=tag() { out.print(content); }
		| exp=expand(new Vector<String>()) { out.print(exp); }
		| ifdef()
		| undef()
		| expandPath()
		| textdomain()
//		| <COMMENT>
		| tok=<SPACE>   { out.print(tok.image); }
		| tok=<EOL>     { out.print(tok.image); }
		| <EOF> {
			out.println();
			debugPrint(defines.size() + " defines found.");
			out.close();
			return;
		}
	)+
}

String tag() :
{
	Token tstart, tend, body;
	String macro, contents;
	StringBuilder sb = new StringBuilder();
}
{
	(
		(tstart=<STAG>) { debugPrint("Start tag: " + tstart.image); sb.append(tstart.image); }
		(
			(<EOL>) { sb.append("\n"); }
		)?
		(
			(
				macro=expand(new Vector<String>())
			) { sb.append(macro); }
			|
			(
				  body=<STRING>
				| body=<LBR>
				| body=<RBR>
				| body=<SPACE>
				| body=<EOL>
				| body=<PATH>
			) { sb.append(body.toString()); }
			|
			( contents=tag() { sb.append(contents); } )
		)+
		(tend=<ETAG>) {
			// TODO can check tag mismatch here
			debugPrint("End tag: " + tend.image);
			sb.append(tend.image);
		}
	) { return sb.toString(); }
}

void textdomain() :
{
	Token tok;
}
{
	<TEXTDOMAIN> <SPACE> (tok=<STRING>) { debugPrint("Textdomain " + colorify(tok.image, tdColor)); }
}

void define() :
{
	Token name, body, arg;
	StringBuilder sb = new StringBuilder();
	Definition def;
	String macro;
	Vector<String> args = new Vector<>();
}
{
	(
		<DEFINE> <SPACE>
		(name=<STRING>)
		(
			<SPACE> (arg=<STRING>) { args.add(arg.toString()); }
		)*
		(<EOL>)?
		(
			(
				macro=expand(args)
			) { sb.append(macro); }
			|
			(
				  body=<STRING>
				| body=<LBR>
				| body=<RBR>
				| body=<SPACE>
				| body=<EOL>
				| body=<PATH>
				| body=<STAG>
				| body=<ETAG>
			) { sb.append(body.toString()); }
		)+
		<ENDDEF>
	) {
		def = new Definition(name.toString(), sb.toString(), args);
		debugPrint("defining macro " + colorify(name.toString(), macroNameColor));
		defines.put(name.toString(), def);
	}
}

String expand(Vector<String> possibleArgs) :
{
	Token name, arg;
	Vector<String> args = new Vector<>();
	StringBuilder sb = new StringBuilder();
}
{
	(
		(<LBR>) (name=<STRING>) { sb.append("{" + name.image); }
		(
			<SPACE> (arg=<STRING>) { sb.append(" " + arg.image); args.add(arg.toString()); }
		)*
		(<RBR>) { sb.append("}"); }
	) {
		Definition def = defines.get(name.image);
		if (def != null) {
			debugPrint("expanding macro " + name.image);
			try {
				return def.expand(args);
			} catch(IllegalArgumentException e) {
				e.printStackTrace();
				return sb.toString();
			}
		} else if (possibleArgs.contains(name.image)) {
			// FIXME: do nothing for now. may need checks later why this is happening.
			return sb.toString();
		} else {
			warningPrint(position(name) + " undefined macro " + name.image);
			return sb.toString();
		}
	}
}

void expandPath() :
{
	Token tok;
	StringBuilder sb = new StringBuilder();
}
{
	(<LBR> (tok=<PATH>) <RBR>) {
		Path p;
		if (tok.image.startsWith(".")) {
			p = Path.of(tok.image);
		} else if (tok.image.startsWith("~")) {
			p = token_source.userDataPath.resolve(tok.image.substring(1));
		} else {
			p = token_source.dataPath.resolve(tok.image);
		}
		
		if (Files.isDirectory(p)) {
			Path p2 = p.resolve("./_main.cfg");
			if (!Files.exists(p2)) {
			  //todo
			} else {
				p = p2;
			}
		}
		
		if (Files.exists(p)) {
			debugPrint("Including file " + colorify(tok.image, filePathColor));
			try {
				subparse(p);
			} catch(IOException ioe) {
				debugPrint("Cannot parse " + tok.image);
				ioe.printStackTrace();
			}
		} else {
			warningPrint(tok.image + " not found");
		}
	}
}

void ifdef() :
{
	Token name;
}
{
	(<IFDEF> <SPACE> (name=<STRING>) <EOL>) {
		if (defines.get(name.image) == null) {
			debugPrint("ifdef: define " + name.image + " not found, skipping block");
			while(token.kind != ENDIF) {
				token = getNextToken();
			}
		} else {
			debugPrint("ifdef: define " + name.image + " found, parsing block");
		}
	}
}

void undef() :
{
	Token name;
}
{
	<UNDEF> <SPACE> (name=<STRING>) {
		debugPrint("removing macro " + name.toString());
		defines.remove(name.image);
	}

}


