package wml;

import java.io.PrintStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Vector;

public class ArgParser {
	public boolean showLogs = false;
	public boolean showParseLogs = false;
	public boolean warnParseLogs = false;
	public Vector<Path> includes = new Vector<>();
	public Path dataPath, userDataPath, inputPath, outputPath;
	public PrintStream out = null;
	
	// TODO this should be autogenerated
	private final String USAGE_STRING = """
			Usage: Preprocessor [-datadir|-userdatadir|-log|-log-t[oken]|-log-p[arse]|-warn-p[arse]|-i[nput] filename|-o[utput] filename|-include file|-h[elp]|-?]
			Options:
				-datadir               Absolute Path to Wesnoth's data directory
				-userdatadir           Absolute Path to Wesnoth's userdata directory
				-log                   Print all logs (parser and tokenizer)
				-log-parse/-log-p      Print all parser logs
				-log-token/-log-t      Print all tokenizer logs
				-warn-parse/-warn-p    Print parser warnings only
				-include file          Preprocess the given file beforehand and collect macro definitions from it.
				                       Can be used multiple times to include multiple files before the main input.
				-input/-i filename     Preprocess the main input file
				-output/-o filename    Write output to the given file
				-help/-?/-h            Print this help""";
	
	public void parseArgs(String[] args) {		
		for (int i = 0; i < args.length; i++) {
			String arg = args[i];
			if (arg.startsWith("--")) {
				arg = arg.substring(2, arg.length());
			} else if (arg.startsWith("-") || arg.startsWith("/")) {
				arg = arg.substring(1, arg.length());
			}
			
			switch(arg) {
				case "datadir" -> { dataPath = Path.of(args[++i]); }
				case "userdatadir" -> { userDataPath = Path.of(args[++i]); }
				case "h", "help", "?" -> {
					System.out.println(USAGE_STRING);
					System.exit(0);
				}
				case "i", "input" -> {
					try {
						inputPath = Path.of(args[++i]);
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
				case "o", "output" -> {
					try {
						outputPath = Path.of(args[++i]);
						out = new PrintStream(Files.newOutputStream(outputPath));
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
				case "include" -> {
					try {
						Path ipath = Path.of(args[++i]);
						includes.add(ipath);
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
				case "log" -> { showLogs = true; showParseLogs = true; }
				case "log-token", "log-t" -> showLogs = true;
				case "log-parse", "log-p" -> showParseLogs = true;
				case "warn-parse", "warn-p" -> warnParseLogs = true;
			}
		}
	}
}
