/* PreprocessorTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. PreprocessorTokenManager.java */
package wml;
import java.awt.Color;
import java.util.*;
import java.util.logging.*;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import static wml.ANSIFormatter.*;

/** Token Manager. */
@SuppressWarnings ("unused")
public class PreprocessorTokenManager implements PreprocessorConstants {
        private final Logger tL = Logger.getLogger("preprocessor.token");

        public boolean showLogs = false;
        public Path dataPath;
        public Path userDataPath;

        public void debugPrint(String s) {
                if (showLogs) {
                        tL.info(s);
                }
        }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x800L) != 0L)
            return 24;
         if ((active0 & 0x4400L) != 0L)
            return 4;
         if ((active0 & 0x3000L) != 0L)
            return 25;
         if ((active0 & 0x200L) != 0L)
            return 12;
         if ((active0 & 0x7eL) != 0L)
         {
            jjmatchedKind = 21;
            return 25;
         }
         return -1;
      case 1:
         if ((active0 & 0x7eL) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 1;
            return 25;
         }
         return -1;
      case 2:
         if ((active0 & 0x7eL) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 2;
            return 25;
         }
         return -1;
      case 3:
         if ((active0 & 0x7eL) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 3;
            return 25;
         }
         return -1;
      case 4:
         if ((active0 & 0x38L) != 0L)
            return 25;
         if ((active0 & 0x46L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 4;
            return 25;
         }
         return -1;
      case 5:
         if ((active0 & 0x6L) != 0L)
            return 25;
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 5;
            return 25;
         }
         return -1;
      case 6:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 6;
            return 25;
         }
         return -1;
      case 7:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 7;
            return 25;
         }
         return -1;
      case 8:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 8;
            return 25;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 35:
         return jjStopAtPos(0, 15);
      case 40:
         return jjStartNfaWithStates_0(0, 11, 24);
      case 41:
         return jjStartNfaWithStates_0(0, 12, 25);
      case 47:
         return jjStartNfaWithStates_0(0, 14, 4);
      case 61:
         return jjStartNfaWithStates_0(0, 13, 25);
      case 91:
         return jjStartNfaWithStates_0(0, 9, 12);
      case 93:
         return jjStartNfaWithStates_0(0, 10, 4);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x2L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x14L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x8L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x40L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x20L);
      case 123:
         return jjStopAtPos(0, 7);
      case 125:
         return jjStopAtPos(0, 8);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x42L);
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x8L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x34L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x3cL);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x2L);
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x4L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x28L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x12L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x40L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x4L);
      case 102:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(4, 3, 25);
         else if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(4, 4, 25);
         else if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 5, 25);
         break;
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 1, 25);
         break;
      case 102:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 2, 25);
         break;
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(9, 6, 25);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec1 = {
   0x33300000L, 0x0L, 0x0L, 0x0L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 24;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffb600000000L & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                     { jjCheckNAdd(4); }
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 26)
                        kind = 26;
                  }
                  else if ((0x100000200L & l) != 0L)
                  {
                     if (kind > 16)
                        kind = 16;
                  }
                  if ((0xffff7fb600000000L & l) != 0L)
                  {
                     if (kind > 21)
                        kind = 21;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 7;
                  if ((0xfc007fb600000000L & l) != 0L)
                  {
                     if (kind > 24)
                        kind = 24;
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAddTwoStates(21, 22); }
                  }
                  if (curChar == 40)
                     { jjCheckNAdd(2); }
                  break;
               case 25:
                  if ((0xffffffb600000000L & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                     { jjCheckNAdd(4); }
                  }
                  if ((0xffff7fb600000000L & l) != 0L)
                  {
                     if (kind > 21)
                        kind = 21;
                     { jjCheckNAdd(20); }
                  }
                  else if (curChar == 47)
                     { jjCheckNAddTwoStates(18, 19); }
                  if ((0xffff7fb600000000L & l) != 0L)
                     { jjCheckNAddTwoStates(16, 17); }
                  break;
               case 12:
                  if ((0xffffffb600000000L & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                     { jjCheckNAdd(4); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(10, 11); }
                  else if (curChar == 47)
                     { jjCheckNAdd(13); }
                  break;
               case 24:
                  if ((0xfffffdffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(2, 3); }
                  if ((0xffffffb600000000L & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                     { jjCheckNAdd(4); }
                  }
                  if ((0xffff7fb600000000L & l) != 0L)
                  {
                     if (kind > 21)
                        kind = 21;
                     { jjCheckNAdd(20); }
                  }
                  else if (curChar == 47)
                     { jjCheckNAddTwoStates(18, 19); }
                  if ((0xffff7fb600000000L & l) != 0L)
                     { jjCheckNAddTwoStates(16, 17); }
                  break;
               case 1:
                  if (curChar == 40)
                     { jjCheckNAdd(2); }
                  break;
               case 2:
                  if ((0xfffffdffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(2, 3); }
                  break;
               case 3:
                  if (curChar == 41 && kind > 17)
                     kind = 17;
                  break;
               case 4:
                  if ((0xffffffb600000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  { jjCheckNAdd(4); }
                  break;
               case 5:
                  if ((0xfc007fb600000000L & l) != 0L && kind > 24)
                     kind = 24;
                  break;
               case 6:
                  if ((0x2400L & l) != 0L && kind > 26)
                     kind = 26;
                  break;
               case 7:
                  if (curChar == 10 && kind > 26)
                     kind = 26;
                  break;
               case 8:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(10, 11); }
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(13, 14); }
                  break;
               case 15:
                  if ((0xffff7fb600000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 16:
                  if ((0xffff7fb600000000L & l) != 0L)
                     { jjCheckNAddTwoStates(16, 17); }
                  break;
               case 17:
                  if (curChar == 47)
                     { jjCheckNAddTwoStates(18, 19); }
                  break;
               case 18:
                  if ((0xffff7fb600000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  { jjCheckNAddTwoStates(18, 19); }
                  break;
               case 19:
                  if (curChar != 47)
                     break;
                  if (kind > 20)
                     kind = 20;
                  { jjCheckNAddTwoStates(18, 19); }
                  break;
               case 20:
                  if ((0xffff7fb600000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  { jjCheckNAdd(20); }
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  { jjCheckNAddTwoStates(21, 22); }
                  break;
               case 22:
                  if (curChar == 46)
                     { jjCheckNAdd(23); }
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  { jjCheckNAdd(23); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x57fffffeffffffffL & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                     { jjCheckNAdd(4); }
                  }
                  if ((0x57fffffed7ffffffL & l) != 0L)
                  {
                     if (kind > 21)
                        kind = 21;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 91)
                     { jjCheckNAddTwoStates(10, 12); }
                  if ((0x57fffffed7ffffffL & l) != 0L)
                  {
                     if (kind > 24)
                        kind = 24;
                  }
                  break;
               case 25:
                  if ((0x57fffffeffffffffL & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                     { jjCheckNAdd(4); }
                  }
                  if ((0x57fffffed7ffffffL & l) != 0L)
                  {
                     if (kind > 21)
                        kind = 21;
                     { jjCheckNAdd(20); }
                  }
                  if ((0x57fffffed7ffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(16, 17); }
                  break;
               case 12:
                  if ((0x57fffffeffffffffL & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                     { jjCheckNAdd(4); }
                  }
                  if ((0x7fffffe80000000L & l) != 0L)
                     { jjCheckNAddTwoStates(10, 11); }
                  break;
               case 24:
                  { jjCheckNAddTwoStates(2, 3); }
                  if ((0x57fffffeffffffffL & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                     { jjCheckNAdd(4); }
                  }
                  if ((0x57fffffed7ffffffL & l) != 0L)
                  {
                     if (kind > 21)
                        kind = 21;
                     { jjCheckNAdd(20); }
                  }
                  if ((0x57fffffed7ffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(16, 17); }
                  break;
               case 2:
                  { jjCheckNAddTwoStates(2, 3); }
                  break;
               case 4:
                  if ((0x57fffffeffffffffL & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  { jjCheckNAdd(4); }
                  break;
               case 5:
                  if ((0x57fffffed7ffffffL & l) != 0L && kind > 24)
                     kind = 24;
                  break;
               case 9:
                  if (curChar == 91)
                     { jjCheckNAddTwoStates(10, 12); }
                  break;
               case 10:
                  if ((0x7fffffe80000000L & l) != 0L)
                     { jjCheckNAddTwoStates(10, 11); }
                  break;
               case 11:
                  if (curChar == 93 && kind > 18)
                     kind = 18;
                  break;
               case 13:
                  if ((0x7fffffe80000000L & l) != 0L)
                     { jjAddStates(3, 4); }
                  break;
               case 14:
                  if (curChar == 93 && kind > 19)
                     kind = 19;
                  break;
               case 15:
                  if ((0x57fffffed7ffffffL & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 16:
                  if ((0x57fffffed7ffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(16, 17); }
                  break;
               case 18:
                  if ((0x57fffffed7ffffffL & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  { jjAddStates(5, 6); }
                  break;
               case 20:
                  if ((0x57fffffed7ffffffL & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  { jjCheckNAdd(20); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 22)
                        kind = 22;
                     { jjCheckNAdd(4); }
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 24)
                        kind = 24;
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 21)
                        kind = 21;
                     { jjCheckNAddStates(0, 2); }
                  }
                  break;
               case 25:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(16, 17); }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 21)
                        kind = 21;
                     { jjCheckNAdd(20); }
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 22)
                        kind = 22;
                     { jjCheckNAdd(4); }
                  }
                  break;
               case 12:
               case 4:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 22)
                     kind = 22;
                  { jjCheckNAdd(4); }
                  break;
               case 24:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(2, 3); }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(16, 17); }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 21)
                        kind = 21;
                     { jjCheckNAdd(20); }
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 22)
                        kind = 22;
                     { jjCheckNAdd(4); }
                  }
                  break;
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(2, 3); }
                  break;
               case 5:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 24)
                     kind = 24;
                  break;
               case 15:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 21)
                     kind = 21;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 16:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(16, 17); }
                  break;
               case 18:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 20)
                     kind = 20;
                  { jjAddStates(5, 6); }
                  break;
               case 20:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 21)
                     kind = 21;
                  { jjCheckNAdd(20); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 24 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\144\145\146\151\156\145", "\145\156\144\144\145\146", 
"\151\146\144\145\146", "\145\156\144\151\146", "\165\156\144\145\146", 
"\164\145\170\164\144\157\155\141\151\156", "\173", "\175", "\133", "\135", "\50", "\51", "\75", "\57", "\43", null, null, 
null, null, null, null, null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   16, 17, 20, 13, 14, 18, 19, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec0[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 32:
         return ((jjbitVec1[i2] & l2) != 0L);
      default :
         return false;
   }
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
         matchedToken = jjFillToken();
         TokenLexicalActions(matchedToken);
         return matchedToken;
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 1 :
        image.append(jjstrLiteralImages[1]);
        lengthOfMatch = jjstrLiteralImages[1].length();
                                  debugPrint("DEFINE");
         break;
      case 2 :
        image.append(jjstrLiteralImages[2]);
        lengthOfMatch = jjstrLiteralImages[2].length();
                                  debugPrint("ENDDEF");
         break;
      case 3 :
        image.append(jjstrLiteralImages[3]);
        lengthOfMatch = jjstrLiteralImages[3].length();
                                  debugPrint("IFDEF");
         break;
      case 4 :
        image.append(jjstrLiteralImages[4]);
        lengthOfMatch = jjstrLiteralImages[4].length();
                                  debugPrint("ENDIF");
         break;
      case 5 :
        image.append(jjstrLiteralImages[5]);
        lengthOfMatch = jjstrLiteralImages[5].length();
                                  debugPrint("UNDEF");
         break;
      case 6 :
        image.append(jjstrLiteralImages[6]);
        lengthOfMatch = jjstrLiteralImages[6].length();
                                        debugPrint("TEXTDOMAIN");
         break;
      case 7 :
        image.append(jjstrLiteralImages[7]);
        lengthOfMatch = jjstrLiteralImages[7].length();
                                          debugPrint("Left Brace");
         break;
      case 8 :
        image.append(jjstrLiteralImages[8]);
        lengthOfMatch = jjstrLiteralImages[8].length();
                                          debugPrint("Right Brace");
         break;
      case 9 :
        image.append(jjstrLiteralImages[9]);
        lengthOfMatch = jjstrLiteralImages[9].length();
                                          debugPrint("Left Sq Bkt");
         break;
      case 10 :
        image.append(jjstrLiteralImages[10]);
        lengthOfMatch = jjstrLiteralImages[10].length();
                                          debugPrint("Right Sq Bkt");
         break;
      case 11 :
        image.append(jjstrLiteralImages[11]);
        lengthOfMatch = jjstrLiteralImages[11].length();
                                          debugPrint("Left Par");
         break;
      case 12 :
        image.append(jjstrLiteralImages[12]);
        lengthOfMatch = jjstrLiteralImages[12].length();
                                          debugPrint("Right Par");
         break;
      case 13 :
        image.append(jjstrLiteralImages[13]);
        lengthOfMatch = jjstrLiteralImages[13].length();
                                          debugPrint("Equals");
         break;
      case 14 :
        image.append(jjstrLiteralImages[14]);
        lengthOfMatch = jjstrLiteralImages[14].length();
                                          debugPrint("Slash");
         break;
      case 16 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                  debugPrint("Space");
         break;
      case 18 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                            debugPrint("Start tag");
         break;
      case 19 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                    debugPrint("End tag");
         break;
      case 20 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                  debugPrint("Path");
         break;
      case 21 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                                          debugPrint("STRING");
         break;
      case 22 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                  debugPrint("STRING");
         break;
      case 23 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                                  debugPrint("NUMBER");
         break;
      case 24 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
          debugPrint("LETTER");
         break;
      case 25 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                  debugPrint("DIGIT");
         break;
      case 26 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                          debugPrint("EOL");
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public PreprocessorTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public PreprocessorTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 24; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, 
};
static final long[] jjtoToken = {
   0x7ffffffL, 
};
static final long[] jjtoSkip = {
   0x0L, 
};
static final long[] jjtoSpecial = {
   0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[24];
    private final int[] jjstateSet = new int[2 * 24];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
