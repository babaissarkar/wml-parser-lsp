options
{
	LOOKAHEAD=3;
	STATIC=false;
	// Enable these to print verbose javacc logs
	DEBUG_PARSER = false;
	DEBUG_LOOKAHEAD = false;
	DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(Preprocessor)
package com.babai.wml.preprocessor;

import java.awt.Color;
import java.util.*;
import java.util.logging.Logger;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;

import com.babai.wml.core.*;

import static com.babai.wml.utils.ANSIFormatter.*;

public class Preprocessor {
	private final Logger pL = Logger.getLogger("preprocessor.parse");
	private boolean showParseLogs = false;
	private boolean warnParseLogs = false;

	public final Color tdColor = new Color(255, 221, 0);
	public final Color macroNameColor = new Color(0, 255, 128);
	public final Color lineNumColor = new Color(0, 153, 255);
	public final Color filePathColor = new Color(128, 192, 255);
	public final Color tagColor = Color.decode("#00CED1");

	private Path currentPath = Path.of(".");
	private PrintStream out;
	private HashMap<String, Definition> defines = new HashMap<>();

	public Preprocessor(Path filePath) throws IOException {
		this(Files.newInputStream(filePath));
		this.currentPath = filePath;
	}

	/**
	 * Create a preprocessor subprocess, that inherits properties
	 * from this one.
	 */
	private Preprocessor child(Path inpath) throws IOException {
		var pinc = new Preprocessor(inpath);
		pinc.showParseLogs = showParseLogs;
		pinc.warnParseLogs = warnParseLogs;
		pinc.out = (getOutput() == null) ? System.out : getOutput();
		pinc.token_source.dataPath = token_source.dataPath;
		pinc.token_source.userDataPath = token_source.userDataPath;
		pinc.token_source.showLogs = token_source.showLogs;
		pinc.setDefinesMap(this.defines);
		return pinc;
	}

	/**
	 * Recursively parse the given Path p
	 * Note: JavaCC doesn't support lambdas or :: yet!
	 */
	public void subparse(Path p) throws IOException, ParseException {
		Path path = p;
		if (Files.isDirectory(path)) {
			Path p2 = path.resolve("./_main.cfg");
			if (!Files.exists(p2)) {
				List<File> files = Arrays.asList(path.toFile().listFiles());
				Collections.sort(files);
				try {
					if (files == null) return;
					for (File f : files) {
						if (!f.isDirectory() && !f.getName().endsWith(".cfg")) return;
						subparse(f.toPath());
					}
					return;
				} catch (IOException e) {
					e.printStackTrace();
				}
			} else {
				path = p2;
			}
		}

		debugPrint("Including: " + colorify(path.toString(), filePathColor));
		Preprocessor pp = child(path);
		pp.parse();
		setDefinesMap(pp.getDefines());
	}

	// skip whitespace tokens
	private final boolean skipWhitespace() {
		boolean skipped = false;
		while (token.kind == SPACE) {
			skipped = true;
			token = getNextToken();
		}
		return skipped;
	}

	private final void handleDirectiveOrComment() throws ParseException {
		Token t = getToken(1);
		switch (t.kind) {
		case DEFINE:
			define();
			break;
		case IFDEF:
			ifdef();
			break;
		case UNDEF:
			undef();
			break;
		case TEXTDOMAIN:
			textdomain();
			break;
		default:
			while (token.kind != EOL) {
				token = getNextToken();
			}
			break;
		}
	}
	
	private final String parseBodyUntil(int endTokenType, Vector<String> args) throws ParseException {
		token = getNextToken();
		var sb = new StringBuffer();
		
		while (token.kind != endTokenType) {
			if (getToken(1).kind == LBR) {
				// nested macro call
				sb.append(token.image);
				String res = expandAll(args);
				sb.append(res);
			} else if (token.kind == HASH) {
				// handleDirectiveOrComment(); // FIXME faulty
				
			} else {
				// anything else is just appended as string to result
				sb.append(token.image);
			}
			token = getNextToken();
		}
		return sb.toString();
	}

	public PrintStream getOutput() {
		return out;
	}

	public void setOutput(PrintStream out) {
		this.out = out;
	}

	public HashMap<String, Definition> getDefines() {
		return this.defines;
	}

	public void addDefines(HashMap<String, Definition> newDefines) {
		this.defines.putAll(newDefines);
	}
	
	public void setDefinesMap(HashMap<String, Definition> defines) {
		this.defines = defines;
	}
	
	public void showParseLogs(boolean showParseLogs) {
		this.showParseLogs = showParseLogs;
	}
	
	public void showWarnLogs(boolean showWarnLogs) {
		this.warnParseLogs = showWarnLogs;
	}

	public void debugPrint(String s) {
		if (showParseLogs) {
			pL.info(s);
		}
	}

	public void warningPrint(String s) {
		if (showParseLogs || warnParseLogs) {
			pL.warning(s);
		}
	}

	public String position(Token tok) {
		return position(tok.beginLine, tok.beginColumn);
	}

	public String position(int line, int col) {
		return colorify("(" + line + ":" + col + ")", lineNumColor);
	}
}

PARSER_END(Preprocessor)

TOKEN_MGR_DECLS : {
	private final Logger tL = Logger.getLogger("preprocessor.token");

	public boolean showLogs = false;
	public Path dataPath;
	public Path userDataPath;

	public void debugPrint(String s) {
		if (showLogs) {
			tL.info(s);
		}
	}
}

// Angle bracket handling
<DEFAULT> TOKEN : {
	< ANGLE_OPEN: "<<" > { SwitchTo(ANGLE); }
}

<ANGLE> MORE : { < ~[] > }   // gobbles characters, appends to token ANGLE_OPEN

<ANGLE> TOKEN : {
	< ANGLE_CLOSE: ">>" > {
		matchedToken.kind = STRING;
		SwitchTo(DEFAULT);
	}
}

// Default args
TOKEN : {
	< ARG    : "#arg"   >
|	< ENDARG : "#endarg" >
}

// Other tokens
TOKEN : {
	< DEFINE : "define" >	{ debugPrint("DEFINE"); }
|	< ENDDEF : "enddef" >	{ debugPrint("ENDDEF"); }
|	< IFDEF  : "ifdef" >	{ debugPrint("IFDEF"); }
|	< ENDIF  : "endif" >	{ debugPrint("ENDIF"); }
|	< UNDEF  : "undef" >	{ debugPrint("UNDEF"); }
|	< TEXTDOMAIN : "textdomain" > { debugPrint("TEXTDOMAIN"); }

|	< LBR    : "{" >		{ debugPrint("Left Brace"); }
|	< RBR    : "}" >		{ debugPrint("Right Brace"); }
|	< LSB    : "[" >		{ debugPrint("Left Sq Bkt"); }
|	< RSB    : "]" >		{ debugPrint("Right Sq Bkt"); }
|	< LPAR   : "(" >		{ debugPrint("Left Par"); }
|	< RPAR   : ")" >		{ debugPrint("Right Par"); }
|	< LANGLE : "<" >		{ debugPrint("Left Angle"); }
|	< RANGLE : ">" >		{ debugPrint("Right Angle"); }
|	< EQL    : "=" >		{ debugPrint("Equals"); }
|	< SLASH  : "/" >		{ debugPrint("Slash"); }
|	< HASH   : "#" >		{ debugPrint("Hash"); }
|	< SPACE  : (" "|"\t")+ >	{ debugPrint("Space"); }

|	< QUOTED_STRING: "\"" (~["\""])* "\"" > { debugPrint("quoted string"); }
|	< INBLK  : <LPAR> (~[")"])+ <RPAR> >

|	< STAG   : <LSB> (["a"-"z"]|<DIGIT>|"_")+ <RSB> > { debugPrint("Start tag"); }
|	< ETAG   : <LSB> <SLASH> (["a"-"z"]|<DIGIT>|"_")+ <RSB> > { debugPrint("End tag"); }

|	< PATH   : (<STRING>) (<SLASH>) (<STRING>|<SLASH>)+ >	{ debugPrint("Path"); }
|	< STRING : (<LETTER>|<DIGIT>)+ >						{ debugPrint("STRING"); }

|	< #LETTER :
		["A"-"Z"]|["a"-"z"]|"?"|"!"|":"|";"|"."|","|"‘"|"’"|"%"
		|"_"|"-"|"'"|"+"|<LANGLE>|<RANGLE>|<LPAR>|<RPAR>|"~"|"*"|"^"|"\""
		|"“"|"”"|"―"|"—"|"|"|"\\"|"$"|"@"|"✘"|"✔"
	>
|	< #DIGIT  : ["0"-"9"] >
|	< EOL     : ("\n"|"\r")+ >			{ debugPrint("EOL"); }
}


void parse() :
{
	Token tok; String content = "";
}
{
	(
		(
			content=tag()
			| content=expandAll(new Vector<>())
			| <HASH> { handleDirectiveOrComment(); }
			| (tok=<SPACE>|tok=<EOL>) { content = tok.image; }
		) { out.print(content); }
	)* <EOF>
}

String tag() :
{
	Token tstart, tend, body;
	String macro, contents;
	StringBuilder sb = new StringBuilder();
}
{
	(
		(tstart=<STAG>) { sb.append(tstart.image); }
		(<EOL>)?
		{
			// TODO can check tag mismatch here
			while (token.kind != ETAG) {
				if (getToken(1).kind == LBR) {
					// nested macro call
					sb.append(expandAll(new Vector<String>()));
				} else if (token.kind == HASH) {
					// handleDirectiveOrComment(); // FIXME faulty
					token = getNextToken();
				} else if (getToken(1).kind == STAG) {
					// nested tag
					sb.append("\t" + tag());
					token = getNextToken();
				} else {
					// anything else except comments is just appended as string to result
					sb.append(token.image);
					token = getNextToken();
				}
			}

			debugPrint("Tag found: " + colorify(tstart.image, tagColor));
			sb.append(token.image);
		}
	) { return sb.toString(); }
}

void textdomain() :
{
	Token tok;
}
{
	<TEXTDOMAIN> <SPACE> (tok=<STRING>) { debugPrint("Textdomain " + colorify(tok.image, tdColor)); }
}

void define() :
{
	Token name, arg;
	Token key, val;
	StringBuilder sb = new StringBuilder();
	Definition def;
	String macro;
	var args = new Vector<String>();
	var defArgs = new HashMap<String, String>();
	Map.Entry<String, String> defArg;
}
{
	(
		<DEFINE> <SPACE>
		(name=<STRING>)
		(
			(<SPACE>)+ (arg=<STRING>) { args.add(arg.toString()); }
		)*
		(<EOL>)*
		(
			(<SPACE>|<EOL>)+ (defArg=defaultArg(args)) {
				defArgs.put(defArg.getKey(), defArg.getValue());
			}
			(<EOL>)*
		)*
	) {
		String body = parseBodyUntil(ENDDEF, args);
		def = new Definition(name.toString(), body, args, defArgs);
		debugPrint("defining macro " + colorify(def.name(), macroNameColor));
		defines.put(name.toString(), def);
	}
}

Map.Entry<String, String> defaultArg(Vector<String> args) :
{
	Token argName, argBody;
}
{
	<ARG> <SPACE> argName=<STRING>
	(<SPACE>|<EOL>)+ {
		var sb = new StringBuffer();
		while (token.kind != ENDARG) {
			if (getToken(1).kind == LBR) {
				// nested macro call
				sb.append(expandAll(args));
			} else if (token.kind == HASH) {
				// handleDirectiveOrComment(); // FIXME faulty
				token = getNextToken();
			} else {
				// anything else is just appended as string to result
				sb.append(token.image);
				token = getNextToken();
			}
		}
		if (sb.toString().startsWith("\n")) {
			sb.deleteCharAt(0);
		}
		return Map.entry(argName.image, sb.toString());
	}
}

String expandAll(Vector<String> possibleArgs) :
{ String content = ""; }
{
	(
		expandPath()
		| content=expand(possibleArgs)
	) {
		return content;
	}
}

String expand(Vector<String> possibleArgs) :
{
	Token name, arg, defarg = null;
	String val;
	var defArgs = new HashMap<String, String>();
	Vector<String> args = new Vector<>();
	StringBuilder sb = new StringBuilder();
}
{
	(
		(<LBR>) (<SPACE>)* (name=<STRING>) { sb.append("{" + name.image); }
		(
			(<SPACE>|<EOL>)+
			(defarg=<STRING> <EQL>)?
			(
				val=expandAll(possibleArgs)
			|	(arg=<STRING>|arg=<PATH>|arg=<QUOTED_STRING>) { val = arg.image; }
			|	(arg=<INBLK>) {
					val = arg.image.substring(1, arg.image.length()-1);
				} // fix for parens
			) {
				sb.append(" " + val);
				if (defarg == null) {
					args.add(val);
				} else {
					defArgs.put(defarg.image, val);
				}
			}
		)*
		(<SPACE>|<EOL>)*
		(<RBR>) { sb.append("}"); }
	) {
		Definition def = defines.get(name.image);
		if (def != null) {
			debugPrint("expanding macro " + def.name() + " with "
				+ Definition.argsAsString(args, defArgs));
			try {
				String res = def.expand(args, defArgs);
				return res;
			} catch(IllegalArgumentException e) {
				e.printStackTrace();
				return sb.toString();
			}
		} else if (possibleArgs.contains(name.image)) {
			// FIXME: do nothing for now. may need checks later why this is happening.
			return sb.toString();
		} else {
			warningPrint(position(name) + " undefined macro " + name.image);
			return sb.toString();
		}
	}
}

void expandPath() :
{
	Token tok;
	StringBuilder sb = new StringBuilder();
}
{
	(<LBR> (<SPACE>)* (tok=<PATH>) (<SPACE>)* <RBR>) {
		Path p;
		if (tok.image.startsWith(".")) {
			if (Files.isDirectory(currentPath)) {
				p = currentPath.resolve(tok.image);
			} else {
				p = currentPath.getParent().resolve(tok.image);
			}
		} else if (tok.image.startsWith("~")) {
			// TODO should throw warning if userdatapath is null
			// Supports both ~add-ons and ~/add-ons
			String relpath = tok.image.substring(1);
			if (relpath.startsWith("/")) {
				relpath = relpath.substring(1);
			}
			p = token_source.userDataPath.resolve(relpath);
		} else {
			// TODO should throw warning if datapath is null
			p = token_source.dataPath.resolve(tok.image);
		}

		debugPrint("Trying to include: " + colorify(p.toString(), filePathColor));

		if (!Files.isDirectory(p) && !p.toString().endsWith(".cfg")) return;

		if (Files.exists(p)) {
			debugPrint("Including: " + colorify(p.toString(), filePathColor));
			try {
				subparse(p);
			} catch(IOException ioe) {
				debugPrint("Cannot parse " + tok.image);
				ioe.printStackTrace();
			}
		} else {
			warningPrint(tok.image + " not found");
		}
	}
}

void ifdef() :
{
	Token name;
}
{
	(<IFDEF> <SPACE> (name=<STRING>) <EOL>) {
		if (defines.get(name.image) == null) {
			debugPrint("ifdef: define " + name.image + " not found, skipping block");
			while (token.kind != ENDIF) {
				token = getNextToken();
			}
		} else {
			debugPrint("ifdef: define " + name.image + " found, parsing block");
		}
	}
}

void undef() :
{
	Token name;
}
{
	<UNDEF> <SPACE> (name=<STRING>) {
		debugPrint("removing macro " + name.toString());
		defines.remove(name.image);
	}

}


