package com.babai.wml.utils;

import java.io.PrintStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Vector;

import com.babai.wml.core.Definition;

public class ArgParser {
	public boolean showLogs = false;
	public boolean showParseLogs = false;
	public boolean warnParseLogs = false;
	public boolean startLSPServer = false;
	public Vector<Path> includes = new Vector<>();
	public Table predefines = Table.ofWithIndices(
			new Class<?>[] { Integer.class, String.class, String.class, Definition.class },
			new String[] { "Line", "URI", "Name", "Definition" }, 1, // URI column
			2 // Name column
	);
	public Path dataPath, userDataPath, inputPath, outputPath;
	public PrintStream out = null;

	// TODO this should be autogenerated
	private final String USAGE_STRING = """
			Usage: Preprocessor [-datadir|-userdatadir|-log|-log-t[oken]|-log-p[arse]|-warn-p[arse]|-s[erver]|-i[nput] filename|-o[utput] filename|-include file|-h[elp]|-?]
			Options:
				-server/-s             Start as WML LSP server
				-datadir [path]        Absolute Path to Wesnoth's data directory
				-userdatadir [path]        Absolute Path to Wesnoth's userdata directory
				-log                   Print all logs (parser and tokenizer)
				-log-parse/-log-p      Print all parser logs
				-log-token/-log-t      Print all tokenizer logs
				-warn-parse/-warn-p    Print parser warnings only
				-include [path]        Preprocess the given file/folder beforehand and collect macro definitions from it.
				                       Can be used multiple times to include multiple files before the main input.
				-define/-d [macroname] [body]
				                       Define this macro before parsing
				-input/-i [path]       Preprocess the main input file
				-output/-o [path]      Write output to the given file
				-help/-?/-h            Print this help""";

	public void parseArgs(String[] args) {
		for (int i = 0; i < args.length; i++) {
			String arg = args[i];
			if (arg.startsWith("--")) {
				arg = arg.substring(2, arg.length());
			} else if (arg.startsWith("-") || arg.startsWith("/")) {
				arg = arg.substring(1, arg.length());
			}

			// TODO needs error checking
			switch (arg) {
			case "datadir" -> {
				dataPath = Path.of(args[++i]);
			}
			case "userdatadir" -> {
				userDataPath = Path.of(args[++i]);
			}
			case "h", "help", "?" -> {
				System.out.println(USAGE_STRING);
				System.exit(0);
			}
			case "i", "input" -> {
				try {
					inputPath = Path.of(args[++i]);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			case "o", "output" -> {
				try {
					outputPath = Path.of(args[++i]);
					out = new PrintStream(Files.newOutputStream(outputPath));
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			case "include" -> {
				try {
					Path ipath = Path.of(args[++i]);
					includes.add(ipath);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			case "define", "d" -> {
				String name = args[++i];
				String value = args[++i];
				predefines.addRow(0, "predefined", name, new Definition(name, value));
			}
			case "log" -> {
				showLogs = true;
				showParseLogs = true;
			}
			case "log-token", "log-t" -> showLogs = true;
			case "log-parse", "log-p" -> showParseLogs = true;
			case "warn-parse", "warn-p" -> warnParseLogs = true;
			case "server", "s" -> startLSPServer = true;
			}
		}
	}
}
